function buildGUI(thisObj){    thisObj.w = (thisObj instanceof Panel) ? thisObj : new Window("palette", "WG", undefined, {resizeable:true});    var ProjGroup = thisObj.w.add("panel{text: 'Project:', justify: 'center', orientation: 'row', alignment:['left','top'], properties:{borderStyle: 'black'}}");    ProjGroup.margins = [3,15,3,3];    var RenderGroup = thisObj.w.add("panel{text: 'Render:', justify: 'center', orientation: 'row', alignment:['left','top'], properties:{borderStyle: 'black'}}");    RenderGroup.margins = [3,15,3,3];    var LocGroup = thisObj.w.add("panel{text: 'Localization:', justify: 'center', orientation: 'row', alignment:['left','top'], properties:{borderStyle: 'black'}}");    LocGroup.margins = [3,15,3,3];    var CreateProjFunc = ProjGroup.add("button",undefined, "Create");    CreateProjFunc.preferredSize = [50,25];    var AddScenesProjFunc = ProjGroup.add("button",undefined, "Add scenes");    AddScenesProjFunc.preferredSize = [80,25];/*    var LeftRenderFunc = RenderGroup.add("button",undefined, "<");    LeftRenderFunc.preferredSize = [20,25];    var RightRenderFunc = RenderGroup.add("button",undefined, ">");    RightRenderFunc.preferredSize = [20,25];*/    var StartRenderFunc = RenderGroup.add("button",undefined, "Render");    StartRenderFunc.preferredSize = [50,25];    var AddControllersLocFunc = LocGroup.add("button",undefined, "Add controllers");    AddControllersLocFunc.preferredSize = [100,25];	var RuLocFunc = LocGroup.add("button",undefined, "RU");    RuLocFunc.preferredSize = [30,25];    var EnLocFunc = LocGroup.add("button",undefined, "EN");    EnLocFunc.preferredSize = [30,25];    var ChLocFunc = LocGroup.add("button",undefined, "CH");    ChLocFunc.preferredSize = [30,25];        CreateProjFunc.onClick = function()        {            CreateProj();        }    AddScenesProjFunc.onClick = function()        {            app.beginUndoGroup("Add scenes");            var project = app.project;            var curentItem = project.activeItem;            var curentLayers = curentItem.selectedLayers;            AddScenes(project, curentItem);            app.endUndoGroup();        }/*    LeftRenderFunc.onClick = function()        {            app.beginUndoGroup("Create In-Comp");            var project = app.project;            var curentItem = project.activeItem;            var curentLayers = curentItem.selectedLayers;            InComp(project, curentItem, curentLayers);            app.endUndoGroup();        }    RightRenderFunc.onClick = function()        {            app.beginUndoGroup("Create Twitter-Comp");            var project = app.project;            var curentItem = project.activeItem;            var curentLayers = curentItem.selectedLayers;            TwitterComp(project, curentItem, curentLayers);            app.endUndoGroup();        }*/    StartRenderFunc.onClick = function(){            app.beginUndoGroup("Render Out");            var keyState = ScriptUI.environment.keyboardState;            if (keyState.altKey){                 RenderOutNoAlpha();            } else {                 RenderOutAlpha();            }            app.endUndoGroup();        }        AddControllersLocFunc.onClick = function()        {            AddControllersLoc();        }        RuLocFunc.onClick = function()        {            var keyState = ScriptUI.environment.keyboardState;            if (keyState.altKey){                 RuLocChange();            } else {                 RuLocAdd();            }        }        EnLocFunc.onClick = function()        {            var keyState = ScriptUI.environment.keyboardState;            if (keyState.altKey){                 EnLocChange();            } else {                 EnLocAdd();            }        }        ChLocFunc.onClick = function()        {            var keyState = ScriptUI.environment.keyboardState;            if (keyState.altKey){                 ChLocChange();            } else {                 ChLocAdd();            }        }    if (thisObj.w instanceof Window)        {            thisObj.w.center();            thisObj.w.show();        }  else thisObj.w.layout.layout(true);}buildGUI(this);// Proj Functions -------------------------------------------------------------function CreateProj(){    app.beginUndoGroup("Project structure creation");    try {        var proj = app.project;        var allFolder = proj.items.addFolder("ALL_Compositions");        var assetsFolder = allFolder.items.addFolder("Assets");        var assetOneFolder = assetsFolder.items.addFolder("Asset№1");        var mainFolder = proj.items.addFolder("Main_Compositions");        var otherFolder = mainFolder.items.addFolder("~ Other_Scenes");        var mattFolder = proj.items.addFolder("MATT");        var aiFolder = mattFolder.items.addFolder("AI");        var footageFolder = mattFolder.items.addFolder("Footage");        var movFolder = footageFolder.items.addFolder("MOV");        var mpegFolder = footageFolder.items.addFolder("MPEG");        var objFolder = mattFolder.items.addFolder("OBJ");        var picturesFolder = mattFolder.items.addFolder("Pictures");        var psdFolder = mattFolder.items.addFolder("PSD");        var referencesFolder = mattFolder.items.addFolder("References");        var rendersFolder = mattFolder.items.addFolder("Renders");        var mainComp = mainFolder.items.addComp("MAIN", 1920, 1080, 1, 420, 30);        var voComp = mainFolder.items.addComp("VO", 1920, 1080, 1, 420, 30);        assetsFolder.label = 11;        assetOneFolder.label = 11;        aiFolder.label = 11;        footageFolder.label = 11;        movFolder.label = 11;        mpegFolder.label = 11;        objFolder.label = 11;        picturesFolder.label = 11;        psdFolder.label = 11;        referencesFolder.label = 11;        rendersFolder.label = 11;        otherFolder.label = 11;        mainComp.label = 1;        voComp.label = 10;        mainComp.layers.add(voComp);    }catch(err) {        alert("Error at line #" + err.line.toString() + "\r" + err.toString());    }    app.endUndoGroup();}function AddScenes(proj, curItem){    try {        var compMarkers = curItem.markerProperty;        var markerTime, markerDuration, markerComment, newComp, newCompLayer, curProjItem,voSceneComp;        var expVoTime = "time + comp('MAIN').layer(thisComp.name).startTime;";        for (var i=1; i <= compMarkers.numKeys; i++){            markerTime = compMarkers.keyTime(i);            markerDuration = compMarkers.keyValue(i).duration > 0 ? compMarkers.keyValue(i).duration : 10;            markerComment = compMarkers.keyValue(i).comment ? compMarkers.keyValue(i).comment : markerDuration;            newComp = proj.items.addComp(markerComment, curItem.width, curItem.height, curItem.pixelAspect, markerDuration, curItem.frameRate);                        newComp.label = 7;            for (var j = 1; j <= proj.numItems; j++) {                curProjItem = proj.item(j);                    if(curProjItem.name == "~ Other_Scenes"){                        newComp.parentFolder = curProjItem;                    }                    if(curProjItem.name == "VO"){                        voSceneComp = newComp.layers.add(curProjItem);                    }            }            newCompLayer = curItem.layers.add(newComp);            newCompLayer.startTime = markerTime;            voSceneComp.timeRemapEnabled = true;            voSceneComp.property("ADBE Time Remapping").expression = expVoTime;        }    }catch(err) {        alert("Error at line #" + err.line.toString() + "\r" + err.toString());    }}// Render Functions -----------------------------------------------------------function RenderOutAlpha(){    try {    		var selectedComp = app.project.activeItem;            var curItem = app.project.renderQueue.items.add(selectedComp);                if (curItem.status == RQItemStatus.QUEUED) {                    // Change all output modules for the current render queue item.                    for (j = 1; j <= curItem.numOutputModules; ++j) {                        var curOM = curItem.outputModule(j);                        //My part - applying render Template                        curOM.applyTemplate("Settings_Alpha");                        //End of My part                                                //var oldLocation = curOM.file;                        //var newLocation = ;                        //curOM.file = new File(newLocation.toString() + "/" + oldLocation.name);                                                //alert("New output path:\n"+curOM.file.fsName, scriptName);                    }                }            }catch(err) {        alert("Error at line #" + err.line.toString() + "\r" + err.toString());    }}function RenderOutNoAlpha(){    try {    		var selectedComp = app.project.activeItem;            var curItem = app.project.renderQueue.items.add(selectedComp);                if (curItem.status == RQItemStatus.QUEUED) {                    // Change all output modules for the current render queue item.                    for (j = 1; j <= curItem.numOutputModules; ++j) {                        var curOM = curItem.outputModule(j);                        //My part - applying render Template                        curOM.applyTemplate("Settings_No_Alpha");                        //End of My part                                                //var oldLocation = curOM.file;                        //var newLocation = ;                        //curOM.file = new File(newLocation.toString() + "/" + oldLocation.name);                                                //alert("New output path:\n"+curOM.file.fsName, scriptName);                    }                }            }catch(err) {        alert("Error at line #" + err.line.toString() + "\r" + err.toString());    }}// Loc Functions --------------------------------------------------------------function AddControllersLoc(){    app.beginUndoGroup("Localization controllers creation");    try {        var proj = app.project;        var childControllerArray = new Array();        var curProjItem, mainController, mainControllerComp, childController, childControllerComp;        for (var j = 1; j <= proj.numItems; j++) {        	curProjItem = proj.item(j);            if(curProjItem.typeName == "Composition")            {            	if(curProjItem.name == "MAIN"){                	mainControllerComp = curProjItem;            	}            	else            	{            		childControllerArray.push(curProjItem);            	}            }        }        mainController = mainControllerComp.layers.addNull();        mainController.name = "LOCALIZATION MAIN";        var ruCheckMain = mainController.property("Effects").addProperty("ADBE Checkbox Control");        ruCheckMain.name = "RU";        ruCheckMain.property("Checkbox").setValue(true);        var enCheckMain = mainController.property("Effects").addProperty("ADBE Checkbox Control");        enCheckMain.name = "EN";        var chCheckMain = mainController.property("Effects").addProperty("ADBE Checkbox Control");        chCheckMain.name = "CH";        for (var i = 0; i < childControllerArray.length; i++) {        	childController = childControllerArray[i].layers.addNull();        	childController.name = "LOCALIZATION";        	var ruCheckChild = childController.property("Effects").addProperty("ADBE Checkbox Control");        	ruCheckChild.name = "RU";        	ruCheckChild.property("Checkbox").expression = 'comp("MAIN").layer("LOCALIZATION MAIN").effect("RU")(1)';        	var enCheckChild = childController.property("Effects").addProperty("ADBE Checkbox Control");        	enCheckChild.name = "EN";        	enCheckChild.property("Checkbox").expression = 'comp("MAIN").layer("LOCALIZATION MAIN").effect("EN")(1)';        	var chCheckChild = childController.property("Effects").addProperty("ADBE Checkbox Control");        	chCheckChild.name = "CH";        	chCheckChild.property("Checkbox").expression = 'comp("MAIN").layer("LOCALIZATION MAIN").effect("CH")(1)';        }            }catch(err) {        alert("Error at line #" + err.line.toString() + "\r" + err.toString());    }    app.endUndoGroup();}function RuLocAdd(){    app.beginUndoGroup("Add RU localization to layer");    try {        var proj = app.project;        var curentItem = proj.activeItem;        var curentLayers = curentItem.selectedLayers;        for (var j = 0; j < curentLayers.length; j++)        {        	curentLayers[j].opacity.expression = 'language = thisComp.layer("LOCALIZATION").effect("RU")(1);\        											   if (language == true){\        											   value;\        											   }else{\        											   0;\        											   }';        }    }catch(err) {        alert("Error at line #" + err.line.toString() + "\r" + err.toString());    }    app.endUndoGroup();}function EnLocAdd(){    app.beginUndoGroup("Add EN localization to layer");    try {        var proj = app.project;        var curentItem = proj.activeItem;        var curentLayers = curentItem.selectedLayers;        for (var j = 0; j < curentLayers.length; j++)        {        	curentLayers[j].opacity.expression = 'language = thisComp.layer("LOCALIZATION").effect("EN")(1);\        											   if (language == true){\        											   value;\        											   }else{\        											   0;\        											   }';        }    }catch(err) {        alert("Error at line #" + err.line.toString() + "\r" + err.toString());    }    app.endUndoGroup();}function ChLocAdd(){    app.beginUndoGroup("Add CH localization to layer");    try {        var proj = app.project;        var curentItem = proj.activeItem;        var curentLayers = curentItem.selectedLayers;        for (var j = 0; j < curentLayers.length; j++)        {        	curentLayers[j].opacity.expression = 'language = thisComp.layer("LOCALIZATION").effect("CH")(1);\        											   if (language == true){\        											   value;\        											   }else{\        											   0;\        											   }';        }    }catch(err) {        alert("Error at line #" + err.line.toString() + "\r" + err.toString());    }    app.endUndoGroup();}function RuLocChange(){    app.beginUndoGroup("Change to RU");    try {        var proj = app.project;        var curProjItem, curLayer;        for (var j = 1; j <= proj.numItems; j++) {        	curProjItem = proj.item(j);            if(curProjItem.name == "MAIN"){                for (var i = 1; i <= curProjItem.numLayers; i++) {					curLayer = curProjItem.layer(i);            		if(curLayer.name == "LOCALIZATION MAIN"){                								curLayer.property("Effects").property("RU").property("Checkbox").setValue(true);        				curLayer.property("Effects").property("EN").property("Checkbox").setValue(false);						curLayer.property("Effects").property("CH").property("Checkbox").setValue(false);            		}        		}            }        }    }catch(err) {        alert("Error at line #" + err.line.toString() + "\r" + err.toString());    }    app.endUndoGroup();}function EnLocChange(){    app.beginUndoGroup("Change to EN");    try {        var proj = app.project;        var curProjItem, curLayer;        for (var j = 1; j <= proj.numItems; j++) {        	curProjItem = proj.item(j);            if(curProjItem.name == "MAIN"){                for (var i = 1; i <= curProjItem.numLayers; i++) {					curLayer = curProjItem.layer(i);            		if(curLayer.name == "LOCALIZATION MAIN"){                								curLayer.property("Effects").property("RU").property("Checkbox").setValue(false);        				curLayer.property("Effects").property("EN").property("Checkbox").setValue(true);						curLayer.property("Effects").property("CH").property("Checkbox").setValue(false);            		}        		}            }        }    }catch(err) {        alert("Error at line #" + err.line.toString() + "\r" + err.toString());    }    app.endUndoGroup();}function ChLocChange(){    app.beginUndoGroup("Change to RU");    try {        var proj = app.project;        var curProjItem, curLayer;        for (var j = 1; j <= proj.numItems; j++) {        	curProjItem = proj.item(j);            if(curProjItem.name == "MAIN"){                for (var i = 1; i <= curProjItem.numLayers; i++) {					curLayer = curProjItem.layer(i);            		if(curLayer.name == "LOCALIZATION MAIN"){                								curLayer.property("Effects").property("RU").property("Checkbox").setValue(false);        				curLayer.property("Effects").property("EN").property("Checkbox").setValue(false);						curLayer.property("Effects").property("CH").property("Checkbox").setValue(true);            		}        		}            }        }    }catch(err) {        alert("Error at line #" + err.line.toString() + "\r" + err.toString());    }    app.endUndoGroup();}